{
  "paragraphs": [
    {
      "text": "%pyspark\n\nimport json\nfrom string import Template\n\ntext \u003d Template(\"\"\"\n\u003cmeta charset\u003d\"utf-8\"\u003e\n\u003cstyle\u003e\n.links line {\n  stroke: #999;\n  stroke-opacity: 0.6;\n}\n.nodes circle {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\n.node text {\n  pointer-events: none;\n  font: 10px sans-serif;\n}\n\u003c/style\u003e\n\u003csvg width\u003d\"600\" height\u003d\"400\"\u003e\u003c/svg\u003e\n\u003cscript src\u003d\"https://d3js.org/d3.v4.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n    var svg \u003d d3.select(\"svg\"),\n        width \u003d +svg.attr(\"width\"),\n        height \u003d +svg.attr(\"height\");\n    var color \u003d d3.scaleOrdinal(d3.schemeCategory20);\n    var simulation \u003d d3.forceSimulation()\n        .force(\"link\", d3.forceLink().id(function(d) { return d.id; }))\n        .force(\"charge\", d3.forceManyBody())\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    d3.json(${file}}, function(error, graph) {\n        if (error) throw error;\n    \n        var link \u003d svg.append(\"g\")\n            .attr(\"class\", \"links\")\n            .selectAll(\"line\")\n            .data(graph.links)\n            .enter().append(\"line\")\n            .attr(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n        var node \u003d svg.append(\"g\")\n            .attr(\"class\", \"nodes\")\n            .selectAll(\"circle\")\n            .data(graph.nodes)\n            .enter().append(\"circle\")\n            .attr(\"r\", 5)\n            .attr(\"fill\", function(d) { return color(d.group); })\n            .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n        node.append(\"title\")\n            .text(function(d) { return d.label; });\n        \n        node.append(\"text\")\n            .attr(\"dx\", 12)\n            .attr(\"dy\", \".35em\")\n            .text(function(d) { return d.label });\n          \n        simulation\n            .nodes(graph.nodes)\n            .on(\"tick\", ticked);\n        simulation.force(\"link\")\n            .links(graph.links);\n        function ticked() {\n            link\n                .attr(\"x1\", function(d) { return d.source.x; })\n                .attr(\"y1\", function(d) { return d.source.y; })\n                .attr(\"x2\", function(d) { return d.target.x; })\n                .attr(\"y2\", function(d) { return d.target.y; });\n            node\n                .attr(\"cx\", function(d) { return d.x; })\n                .attr(\"cy\", function(d) { return d.y; });\n        }\n    });\n    \n    function dragstarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx \u003d d.x;\n        d.fy \u003d d.y;\n    }\n    \n    function dragged(d) {\n        d.fx \u003d d3.event.x;\n        d.fy \u003d d3.event.y;\n    }\n    \n    function dragended(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx \u003d null;\n        d.fy \u003d null;\n    }\n\u003c/script\u003e\n\"\"\").safe_substitute(file\u003d\u0027/projects/stars/m2m/var/scratch/node_link_temp.json\u0027)\n\nprint (\"%html \" + text)",
      "user": "ad\\hongyi",
      "dateUpdated": "Mar 27, 2017 2:34:13 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\u003cmeta charset\u003d\"utf-8\"\u003e\n\u003cstyle\u003e\n.links line {\n  stroke: #999;\n  stroke-opacity: 0.6;\n}\n.nodes circle {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\n.node text {\n  pointer-events: none;\n  font: 10px sans-serif;\n}\n\u003c/style\u003e\n\u003csvg width\u003d\"600\" height\u003d\"400\"\u003e\u003c/svg\u003e\n\u003cscript src\u003d\"https://d3js.org/d3.v4.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n    var svg \u003d d3.select(\"svg\"),\n        width \u003d +svg.attr(\"width\"),\n        height \u003d +svg.attr(\"height\");\n    var color \u003d d3.scaleOrdinal(d3.schemeCategory20);\n    var simulation \u003d d3.forceSimulation()\n        .force(\"link\", d3.forceLink().id(function(d) { return d.id; }))\n        .force(\"charge\", d3.forceManyBody())\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n    d3.json(/projects/stars/m2m/var/scratch/node_link_temp.json}, function(error, graph) {\n        if (error) throw error;\n        var link \u003d svg.append(\"g\")\n            .attr(\"class\", \"links\")\n            .selectAll(\"line\")\n            .data(graph.links)\n            .enter().append(\"line\")\n            .attr(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n        var node \u003d svg.append(\"g\")\n            .attr(\"class\", \"nodes\")\n            .selectAll(\"circle\")\n            .data(graph.nodes)\n            .enter().append(\"circle\")\n            .attr(\"r\", 5)\n            .attr(\"fill\", function(d) { return color(d.group); })\n            .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n        node.append(\"title\")\n            .text(function(d) { return d.label; });\n        node.append(\"text\")\n            .attr(\"dx\", 12)\n            .attr(\"dy\", \".35em\")\n            .text(function(d) { return d.label });\n        simulation\n            .nodes(graph.nodes)\n            .on(\"tick\", ticked);\n        simulation.force(\"link\")\n            .links(graph.links);\n        function ticked() {\n            link\n                .attr(\"x1\", function(d) { return d.source.x; })\n                .attr(\"y1\", function(d) { return d.source.y; })\n                .attr(\"x2\", function(d) { return d.target.x; })\n                .attr(\"y2\", function(d) { return d.target.y; });\n            node\n                .attr(\"cx\", function(d) { return d.x; })\n                .attr(\"cy\", function(d) { return d.y; });\n        }\n    });\n    function dragstarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx \u003d d.x;\n        d.fy \u003d d.y;\n    }\n    function dragged(d) {\n        d.fx \u003d d3.event.x;\n        d.fy \u003d d3.event.y;\n    }\n    function dragended(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx \u003d null;\n        d.fy \u003d null;\n    }\n\u003c/script\u003e\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490638806748_-368348901",
      "id": "20170327-142006_602835780",
      "dateCreated": "Mar 27, 2017 2:20:06 PM",
      "dateStarted": "Mar 27, 2017 2:34:13 PM",
      "dateFinished": "Mar 27, 2017 2:34:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "ad\\hongyi",
      "dateUpdated": "Mar 27, 2017 2:20:20 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490638820080_1516181860",
      "id": "20170327-142020_1139391512",
      "dateCreated": "Mar 27, 2017 2:20:20 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "~Trash/NCATSTranslator/VisualizeSemanticData/Test/TestD3Viz",
  "id": "2CBDM5G8W",
  "angularObjects": {
    "2C8PNVW4G:shared_process": [],
    "2C9M4A84U:shared_process": [],
    "2C8JB5J2A:shared_process": [],
    "2C8UPVAV8:shared_process": [],
    "2CB6QSJQK:shared_process": [],
    "2CB4GRYA4:shared_process": [],
    "2CAZ1XA1G:shared_process": [],
    "2CBGUDB9H:shared_process": [],
    "2C9VT2CHD:shared_process": [],
    "2CBBPS1GQ:shared_process": [],
    "2CAYF7YMG:shared_process": [],
    "2C7NS2RPM:shared_process": [],
    "2CB55MCKF:shared_process": [],
    "2C9P6TDB4:shared_process": [],
    "2C7YD2D51:shared_process": [],
    "2C9WWVYVN::2CBDM5G8W": [],
    "2C9UAC7QR:shared_process": [],
    "2C8K1VZ6J:shared_process": [],
    "2CA9JMF94:shared_process": []
  },
  "config": {},
  "info": {}
}