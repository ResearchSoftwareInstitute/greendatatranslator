{
  "paragraphs": [
    {
      "text": "%pyspark\nimport prov.model as prov\nimport re\nfrom collections import defaultdict\n\nclass QueryResponseProvenance(object):\n    PREFIX \u003d re.compile (\u0027^prefix \u0027, re.I)\n    \"\"\" Abstract model of the provenance of components of a complex query. \"\"\"\n    def __init__(self, default_ns, namespaces\u003d[]):\n        \"\"\" Specify a default namespace and associated sub namespaces \"\"\"\n        self.document \u003d prov.ProvDocument ()\n        self.default_ns \u003d default_ns\n        self.document.set_default_namespace (self.default_ns)\n        self.namespaces \u003d namespaces\n        self.subspaces \u003d {}\n        for namespace in self.namespaces:\n            self.subspaces[namespace] \u003d self.add_namespace (self.default_ns, namespace)\n    def add_namespace (self, root, qualifier):\n        subspace \u003d \"{0}{1}\".format (root, qualifier)\n        self.document.add_namespace (qualifier, subspace)\n        return subspace\n    def entity (self, name, tuples):\n        self.document.entity (name, tuples)\n    def add_data_source (self, name, entity):\n        print (entity.to_tuple())\n        self.entity (name, entity.to_tuple ())\n\nclass AbstractEntity(object):\n    def __init__(self, type, namespace):\n        self.attributes \u003d []\n        self.namespace \u003d namespace\n        self.add_attribute (prov.PROV_TYPE, type)\n    def add_attribute (self, iri, value):\n        self.attributes.append ((\u0027{0}{1}\u0027.format (self.namespace, iri), value))\n    def to_tuple (self):\n        return tuple(self.attributes)\n\nclass DataSource(AbstractEntity):\n    def __init__(self, namespace):\n        AbstractEntity.__init__(self, type, namespace)\n        self.add_attribute ()\n        \n\u0027\u0027\u0027 DataLake Support \u0027\u0027\u0027\nclass DataLakeProvenance(QueryResponseProvenance):\n    def __init__(self, default_ns, namespaces\u003d[]):\n        QueryResponseProvenance.__init__(self, default_ns, namespaces)\n\n    def parse_sparql (self, query, source_map):\n        sources \u003d {}\n        for line in query.split (\u0027\\n\u0027):\n            print (line)\n            print (self.PREFIX)\n            if self.PREFIX.match (line):\n                parts \u003d line.trim().split (\u0027 \u0027)\n                if len(parts) \u003e\u003d 3:\n                    iri \u003d parts[2].trim ()\n                    print (iri)\n                    e \u003d None\n                    for k, v in source_map.iteritems ():\n                        if k in iri:\n                            if k in sources:\n                                e \u003d sources[k]\n                            else:\n                                e \u003d AbstractEntity (\u0027datasource\u0027, \u0027{0}{1}\u0027.format (self.default_ns, k))\n                                sources[k] \u003d e\n                            e.add_attribute (\u0027datasource\u0027, iri)\n                    if e is None:\n                        e \u003d AbstractEntity (\u0027DataSource\u0027, \u0027http://purl.datasource.org/\u0027)\n                        e.add_attribute (\u0027datasource\u0027, iri)\n                    self.add_entity (e)\n\n\u0027\u0027\u0027 Domain Specific Data Sources \u0027\u0027\u0027\nclass MedchemEntity(AbstractEntity):\n    def __init__(self, type, namespace):\n        AbstractEntity.__init__(self, type, namespace)\n\nclass C2B2REntity(MedchemEntity):\n    def __init__(self, namespace):\n        MedchemEntity.__init__(self, \u0027DataSource\u0027, )\n        self.add_attribute ()\n\ndef test ():\n    sparql_query \u003d \"\"\"\n    PREFIX db_resource:      \u003chttp://chem2bio2rdf.org/drugbank/resource/\u003e\n    PREFIX ctd_chem_disease: \u003chttp://chem2bio2rdf.org/ctd/resource/ctd_chem_disease/\u003e \n    PREFIX biordf:           \u003chttp://bio2rdf.org/\u003e\n    PREFIX ctd:              \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\n    PREFIX pubchem:          \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\n    SELECT DISTINCT ?chem_disease ?meshid ?compound ?drug\n    WHERE {\n      ?chem_disease ctd:diseaseid ?meshid .\n      ?chem_disease ctd:cid       ?compound .\n      ?drug         db_resource:CID ?compound\n    }\"\"\"\n\n    provenance \u003d DataLakeProvenance (\n        default_ns \u003d \u0027http://purl.translator.org/prov/\u0027,\n        namespaces \u003d [ \u0027clinical\u0027, \u0027enviro\u0027, \u0027medchem\u0027 ])\n    provenance.parse_sparql (sparql_query, source_map \u003d {\n        \u0027/ctd\u0027 : \u0027ctd\u0027,\n        \u0027/GO_\u0027 : \u0027GO\u0027,\n        \u0027/drugbank\u0027 : \u0027drugbank\u0027,\n        \u0027/monarch\u0027 : \u0027monarch\u0027\n    })\n    print (provenance.document.get_provn())\n\ntest ()\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 24, 2017 4:08:44 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    PREFIX db_resource:      \u003chttp://chem2bio2rdf.org/drugbank/resource/\u003e\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    PREFIX ctd_chem_disease: \u003chttp://chem2bio2rdf.org/ctd/resource/ctd_chem_disease/\u003e \n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    PREFIX biordf:           \u003chttp://bio2rdf.org/\u003e\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    PREFIX ctd:              \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    PREFIX pubchem:          \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    SELECT DISTINCT ?chem_disease ?meshid ?compound ?drug\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    WHERE {\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n      ?chem_disease ctd:diseaseid ?meshid .\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n      ?chem_disease ctd:cid       ?compound .\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n      ?drug         db_resource:CID ?compound\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\n    }\n\u003c_sre.SRE_Pattern object at 0x362af50\u003e\ndocument\n  default \u003chttp://purl.translator.org/prov/\u003e\n  prefix enviro \u003chttp://purl.translator.org/prov/enviro\u003e\n  prefix medchem \u003chttp://purl.translator.org/prov/medchem\u003e\n  prefix clinical \u003chttp://purl.translator.org/prov/clinical\u003e\n  \nendDocument\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490377578176_1075105290",
      "id": "20170324-134618_408304644",
      "dateCreated": "Mar 24, 2017 1:46:18 PM",
      "dateStarted": "Mar 24, 2017 4:08:44 PM",
      "dateFinished": "Mar 24, 2017 4:08:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 24, 2017 1:46:38 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490377598013_-1205270792",
      "id": "20170324-134638_186420208",
      "dateCreated": "Mar 24, 2017 1:46:38 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "/NCATSTranslator/Green/Provenance",
  "id": "2CC6EKV1B",
  "angularObjects": {
    "2C8PNVW4G:shared_process": [],
    "2C9WWVYVN::2CC6EKV1B": [],
    "2C9M4A84U:shared_process": [],
    "2C8JB5J2A:shared_process": [],
    "2C8UPVAV8:shared_process": [],
    "2CB6QSJQK:shared_process": [],
    "2CB4GRYA4:shared_process": [],
    "2CAZ1XA1G:shared_process": [],
    "2CBGUDB9H:shared_process": [],
    "2C9VT2CHD:shared_process": [],
    "2CBBPS1GQ:shared_process": [],
    "2CAYF7YMG:shared_process": [],
    "2C7NS2RPM:shared_process": [],
    "2CB55MCKF:shared_process": [],
    "2C9P6TDB4:shared_process": [],
    "2C7YD2D51:shared_process": [],
    "2C9UAC7QR:shared_process": [],
    "2C8K1VZ6J:shared_process": [],
    "2CA9JMF94:shared_process": []
  },
  "config": {},
  "info": {}
}