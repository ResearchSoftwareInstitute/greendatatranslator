{
  "paragraphs": [
    {
      "text": "%pyspark\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 24, 2017 5:00:17 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490389217441_1485748538",
      "id": "20170324-170017_1544840637",
      "dateCreated": "Mar 24, 2017 5:00:17 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport prov.model as prov\nimport re\nfrom collections import defaultdict\n\nclass QueryResponseProvenance(object):\n    PREFIX \u003d re.compile (\u0027^prefix \u0027, re.I)\n    \"\"\" Abstract model of the provenance of components of a complex query. \"\"\"\n    def __init__(self, default_ns, namespaces\u003d[]):\n        \"\"\" Specify a default namespace and associated sub namespaces \"\"\"\n        self.document \u003d prov.ProvDocument ()\n        self.default_ns \u003d default_ns\n        self.document.set_default_namespace (self.default_ns)\n        self.namespaces \u003d namespaces\n        self.subspaces \u003d {}\n        for namespace in self.namespaces:\n            self.subspaces[namespace] \u003d self.add_namespace (self.default_ns, namespace)\n    def add_namespace (self, root, qualifier):\n        subspace \u003d \"{0}{1}\".format (root, qualifier)\n        self.document.add_namespace (qualifier, subspace)\n        return subspace\n    def add_entity (self, name, tuples):\n        self.document.entity (name, tuples)\n    def add_data_source (self, name, entity):\n        self.entity (name, entity.to_tuple ())\n\nprovenance \u003d QueryResponseProvenance (\u0027http://purl.some.ns/\u0027, [ \u0027a\u0027, \u0027b\u0027, \u0027c\u0027 ])\n\nclass AbstractEntity(object):\n    def __init__(self, type, namespace, attributes\u003d[]):\n        self.attributes \u003d []\n        self.namespace \u003d namespace\n        self.attr_keys \u003d {}\n        self.add_attribute (prov.PROV_TYPE, type, plain\u003dTrue)\n        for a in attributes:\n            assert len(a) \u003d\u003d 2, \"Attribute components must be len\u003d\u003d2 arrays\"\n            self.add_attribute (a[0], a[1])\n    def add_attribute (self, iri, value, plain\u003dFalse):\n        key \u003d \u0027{0}@{1}\u0027.format (iri, value)\n        print (key)\n        if not key in self.attr_keys:\n            if plain:\n                self.attributes.append ((iri, value))\n            else:\n                self.attributes.append ((\u0027{0}{1}\u0027.format (self.namespace, iri), value))\n            self.attr_keys[key] \u003d 1\n    def to_tuple (self):\n        return tuple(self.attributes)\n\ne \u003d AbstractEntity (\u0027SomeType\u0027, \u0027http://purl.some.ns/ae\u0027, )\ne.add_attribute (\u0027ds0\u0027, \u0027\u003chttp://all.ds.org/\u0027)\ne.add_attribute (\u0027ds1\u0027, \u0027\u003chttp://all.ds.org/\u0027)\nprovenance.add_entity (\u0027e\u0027, e.to_tuple ())\nprint (provenance.document.get_provn ())",
      "user": "ad\\scox",
      "dateUpdated": "Mar 24, 2017 5:38:00 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "prov:type@SomeType\nds0@\u003chttp://all.ds.org/\nds1@\u003chttp://all.ds.org/\ndocument\n  default \u003chttp://purl.some.ns/\u003e\n  prefix a \u003chttp://purl.some.ns/a\u003e\n  prefix c \u003chttp://purl.some.ns/c\u003e\n  prefix b \u003chttp://purl.some.ns/b\u003e\n  \n  entity(e, [prov:type\u003d\"SomeType\", aeds0\u003d\"\u003chttp://all.ds.org/\", aeds1\u003d\"\u003chttp://all.ds.org/\"])\nendDocument\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490388079769_-1478794288",
      "id": "20170324-164119_865549647",
      "dateCreated": "Mar 24, 2017 4:41:19 PM",
      "dateStarted": "Mar 24, 2017 5:38:00 PM",
      "dateFinished": "Mar 24, 2017 5:38:00 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nclass DataSource(AbstractEntity):\n    def __init__(self, namespace):\n        AbstractEntity.__init__(self, type, namespace)\n\n\u0027\u0027\u0027 DataLake Support \u0027\u0027\u0027\nclass DataLakeProvenance(QueryResponseProvenance):\n    def __init__(self, default_ns, namespaces\u003d[]):\n        QueryResponseProvenance.__init__(self, default_ns, namespaces)\n\n    def parse_sparql (self, query, source_map):\n        sources \u003d {}\n        for line in query.split (\u0027\\n\u0027):\n            line \u003d \u0027 \u0027.join (line.strip ().split ())\n            match \u003d self.PREFIX.match (line)\n            if match is None:\n                continue\n            if True:\n                parts \u003d line.strip().split (\u0027 \u0027)\n                if len(parts) \u003e\u003d 3:\n                    iri \u003d parts[2].strip ()\n                    e \u003d None\n                    for k, v in source_map.iteritems ():\n                        if k in iri:\n                            if v in sources:\n                                e \u003d sources[v]\n                            else:\n                                e \u003d AbstractEntity (\u0027data\u0027, \u0027{0}{1}\u0027.format (self.default_ns, k))\n                                sources[v] \u003d e\n                            e.add_attribute (\u0027src\u0027, v, plain\u003dTrue)\n                    if e is None:\n                        e \u003d AbstractEntity (\u0027data\u0027, \u0027http://purl.data.org/\u0027)\n                        e.add_attribute (\u0027src\u0027, iri, plain\u003dTrue)\n                    self.add_entity (\u0027data\u0027, e.to_tuple ())\n\nclass TranslatorProvenance (DataLakeProvenance):\n    def __init__(self):\n        DataLakeProvenance.__init__(\n            self,\n            default_ns \u003d \u0027http://purl.translator.org/prov/\u0027,\n            namespaces \u003d [\n                \u0027clinical\u0027, \u0027enviro\u0027, \u0027medchem\u0027,             # data sources\n                \u0027exposure-pm25-ozone\u0027, \u0027clinical-prescribed\u0027 # algorithms / assumptions\n            ])\n    def parse_sparql (self, query):\n        super(TranslatorProvenance, self).parse_sparql (\n            query,\n            source_map \u003d {\n                \u0027\u003chttp://chem2bio2rdf.org/ctd/\u0027 : \u0027c2b2r.ctd\u0027,\n                \u0027GO_\u0027 : \u0027GO\u0027,\n                \u0027\u003chttp://chem2bio2rdf.org/drugbank\u0027 : \u0027c2b2r.drugbank\u0027,\n                \u0027monarch\u0027 : \u0027monarch\u0027\n            })\n\ndef test ():\n    sparql_query \u003d \"\"\"\n    PREFIX db_resource:      \u003chttp://chem2bio2rdf.org/drugbank/resource/\u003e\n    PREFIX ctd_chem_disease: \u003chttp://chem2bio2rdf.org/ctd/resource/ctd_chem_disease/\u003e \n    PREFIX biordf:           \u003chttp://bio2rdf.org/\u003e\n    PREFIX ctd:              \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\n    SELECT DISTINCT ?chem_disease ?meshid ?compound ?drug\n    WHERE {\n      ?chem_disease ctd:diseaseid ?meshid .\n      ?chem_disease ctd:cid       ?compound .\n      ?drug         db_resource:CID ?compound\n    }\"\"\"\n\n    provenance \u003d TranslatorProvenance ()\n    provenance.parse_sparql (sparql_query)\n    print (provenance.document.get_provn())\n\ntest ()\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 24, 2017 5:39:45 PM",
      "config": {
        "colWidth": 11.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "prov:type@data\nsrc@c2b2r.drugbank\nprov:type@data\nsrc@c2b2r.ctd\nprov:type@data\nsrc@\u003chttp://bio2rdf.org/\u003e\nsrc@c2b2r.ctd\ndocument\n  default \u003chttp://purl.translator.org/prov/\u003e\n  prefix enviro \u003chttp://purl.translator.org/prov/enviro\u003e\n  prefix medchem \u003chttp://purl.translator.org/prov/medchem\u003e\n  prefix clinical \u003chttp://purl.translator.org/prov/clinical\u003e\n  prefix clinical-prescribed \u003chttp://purl.translator.org/prov/clinical-prescribed\u003e\n  prefix exposure-pm25-ozone \u003chttp://purl.translator.org/prov/exposure-pm25-ozone\u003e\n  \n  entity(data, [prov:type\u003d\"data\", src\u003d\"c2b2r.drugbank\"])\n  entity(data, [prov:type\u003d\"data\", src\u003d\"c2b2r.ctd\"])\n  entity(data, [prov:type\u003d\"data\", src\u003d\"\u003chttp://bio2rdf.org/\u003e\"])\n  entity(data, [prov:type\u003d\"data\", src\u003d\"c2b2r.ctd\"])\nendDocument\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490377578176_1075105290",
      "id": "20170324-134618_408304644",
      "dateCreated": "Mar 24, 2017 1:46:18 PM",
      "dateStarted": "Mar 24, 2017 5:39:45 PM",
      "dateFinished": "Mar 24, 2017 5:39:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 24, 2017 1:46:38 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490377598013_-1205270792",
      "id": "20170324-134638_186420208",
      "dateCreated": "Mar 24, 2017 1:46:38 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "/NCATSTranslator/Green/Provenance",
  "id": "2CC6EKV1B",
  "angularObjects": {
    "2C8PNVW4G:shared_process": [],
    "2C9WWVYVN::2CC6EKV1B": [],
    "2C9M4A84U:shared_process": [],
    "2C8JB5J2A:shared_process": [],
    "2C8UPVAV8:shared_process": [],
    "2CB6QSJQK:shared_process": [],
    "2CB4GRYA4:shared_process": [],
    "2CAZ1XA1G:shared_process": [],
    "2CBGUDB9H:shared_process": [],
    "2C9VT2CHD:shared_process": [],
    "2CBBPS1GQ:shared_process": [],
    "2CAYF7YMG:shared_process": [],
    "2C7NS2RPM:shared_process": [],
    "2CB55MCKF:shared_process": [],
    "2C9P6TDB4:shared_process": [],
    "2C7YD2D51:shared_process": [],
    "2C9UAC7QR:shared_process": [],
    "2C8K1VZ6J:shared_process": [],
    "2CA9JMF94:shared_process": []
  },
  "config": {},
  "info": {}
}