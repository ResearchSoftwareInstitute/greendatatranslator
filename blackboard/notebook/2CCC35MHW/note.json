{
  "paragraphs": [
    {
      "text": "%md\n## Problem\nWe\u0027d like to know how reflective the [disease ontology](http://disease-ontology.org/) is of chemical realities. Do diseases classified together by the ontology respond to treatment by the same chemical compounds?\n\n## Approach\n\nFirst we\u0027ll build \n\n* a data structure for the disease ontology\n* a map of associations between diseases and compounds\n\n### 1.0 : Build the Disease Ontology Data Structure\n* Downloaded the disease ontology in the [OBO](https://en.wikipedia.org/wiki/Open_Biomedical_Ontologies) format.\n* Installed the pronto Python library that includes an OBO parser.\n* Parsed the ontology and encoded each element as Element.ID\u003d\u003e[ MESH.ID, Lineage ].\n* That is, a map of element id to an object containing mesh id and the list of ancestors of each node up the ontology hierarchy.\n\n### 1.1 : Build the Graph of Disease to Chemical Compound \n* Query Blazegraph, for now, focusing on CTD to get disease -\u003e compound associations\n* Create a map of disease id to compound\n\n",
      "dateUpdated": "Mar 8, 2017 1:56:24 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eProblem\u003c/h2\u003e\n\u003cp\u003eWe\u0026rsquo;d like to know how reflective the \u003ca href\u003d\"http://disease-ontology.org/\"\u003edisease ontology\u003c/a\u003e is of chemical realities. Do diseases classified together by the ontology respond to treatment by the same chemical compounds?\u003c/p\u003e\n\u003ch2\u003eApproach\u003c/h2\u003e\n\u003cp\u003eFirst we\u0026rsquo;ll build \u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ea data structure for the disease ontology\u003c/li\u003e\n  \u003cli\u003ea map of associations between diseases and compounds\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e1.0 : Build the Disease Ontology Data Structure\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eDownloaded the disease ontology in the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Open_Biomedical_Ontologies\"\u003eOBO\u003c/a\u003e format.\u003c/li\u003e\n  \u003cli\u003eInstalled the pronto Python library that includes an OBO parser.\u003c/li\u003e\n  \u003cli\u003eParsed the ontology and encoded each element as Element.ID\u003d\u0026gt;[ MESH.ID, Lineage ].\u003c/li\u003e\n  \u003cli\u003eThat is, a map of element id to an object containing mesh id and the list of ancestors of each node up the ontology hierarchy.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e1.1 : Build the Graph of Disease to Chemical Compound\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eQuery Blazegraph, for now, focusing on CTD to get disease -\u0026gt; compound associations\u003c/li\u003e\n  \u003cli\u003eCreate a map of disease id to compound\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384830_-1604394944",
      "id": "20170307-203540_90526252",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nFirst, define a class for interacting with a triplestore.",
      "user": "ad\\scox",
      "dateUpdated": "Mar 17, 2017 3:04:57 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eFirst, define a class for interacting with a triplestore.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384831_-1604779693",
      "id": "20170307-205035_346909513",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 17, 2017 3:04:57 PM",
      "dateFinished": "Mar 17, 2017 3:04:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom SPARQLWrapper import SPARQLWrapper2, JSON\nfrom collections import defaultdict\n\nclass TripleStore(object):\n    def __init__(self, hostname):\n        self.service \u003d  SPARQLWrapper2 (hostname)\n    def execute_query (self, query):\n        self.service.setQuery (query)\n        self.service.setReturnFormat (JSON)\n        return self.service.query().convert ()\n    def execute_query_file (self, query_file):\n        result \u003d None\n        with open (query_file, \"r\") as stream:\n            query \u003d stream.read ()\n            result \u003d self.execute_query (query)\n        return result\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:30:24 AM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384832_-1520519684",
      "id": "20170307-202834_465623601",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 11:30:24 AM",
      "dateFinished": "Mar 20, 2017 11:30:24 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThen load the disease ontology and turn it into a map of term ids to pairs of mesh ids and ontological lineages.",
      "dateUpdated": "Mar 8, 2017 1:56:24 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThen load the disease ontology and turn it into a map of term ids to pairs of mesh ids and ontological lineages.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384832_-1520519684",
      "id": "20170307-205113_1015121974",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport pronto\n\nclass Disease(object):\n    def __init__ (self, xref, lineage):\n        self.xref \u003d xref\n        self.lineage \u003d lineage\n\ndef parse_ontology ():\n    ont \u003d pronto.Ontology (\u0027/projects/stars/m2m/var/diseaseontology/dis.obo\u0027)\n    \u0027\u0027\u0027 print (ont.json) \u0027\u0027\u0027\n    hierarchy_map \u003d {}\n    for term in ont:\n        xref \u003d None\n        if \u0027xref\u0027 in term.other:\n            for x in term.other[\u0027xref\u0027]:\n                if x.startswith (\"MESH:\"):\n                    xref \u003d x\n                    break\n        lineage \u003d map ( lambda t : t.id, term.rparents ())\n        sorted_lineage \u003d sorted (lineage, key\u003dlambda e : int(e.split(\u0027:\u0027)[1]))\n        disease \u003d Disease (xref\u003dxref, lineage\u003dsorted_lineage)\n        hierarchy_map[term.id.upper ()] \u003d disease\n\n    #for k in hierarchy_map:\n    #    print (\"{0} {1} {2}\".format (k, hierarchy_map[k].xref, hierarchy_map[k].lineage))\n\n    return hierarchy_map\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:30:33 AM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384833_-1520904433",
      "id": "20170307-202916_1288718618",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 11:30:33 AM",
      "dateFinished": "Mar 20, 2017 11:30:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nDefine our [blazegraph](http://stars-blazegraph.renci.org/blazegraph/#query) query.",
      "dateUpdated": "Mar 8, 2017 1:56:24 PM",
      "config": {
        "enabled": true,
        "tableHide": true,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eDefine our \u003ca href\u003d\"http://stars-blazegraph.renci.org/blazegraph/#query\"\u003eblazegraph\u003c/a\u003e query.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384834_-1519750186",
      "id": "20170307-205252_117835410",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nquery \u003d \"\"\"\nPREFIX db_resource:      \u003chttp://chem2bio2rdf.org/drugbank/resource/\u003e\nPREFIX ctd_chem_disease: \u003chttp://chem2bio2rdf.org/ctd/resource/ctd_chem_disease/\u003e \nPREFIX biordf:           \u003chttp://bio2rdf.org/\u003e\nPREFIX ctd:              \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\nPREFIX pubchem:          \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\nSELECT DISTINCT ?chem_disease ?meshid ?compound ?drug\nWHERE {\n  ?chem_disease ctd:diseaseid ?meshid .\n  ?chem_disease ctd:cid       ?compound .\n  ?drug         db_resource:CID ?compound\n}\n\"\"\"",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:30:37 AM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384834_-1519750186",
      "id": "20170307-202932_2073115934",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 11:30:37 AM",
      "dateFinished": "Mar 20, 2017 11:30:37 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nDefine a function to run the query, parse the response, and return a map of disease to compound where the key is a MESH id.",
      "dateUpdated": "Mar 8, 2017 1:56:24 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eDefine a function to run the query, parse the response, and return a map of disease to compound where the key is a MESH id.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384835_-1520134935",
      "id": "20170307-205321_210744016",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndef get_disease_drug_associations (triplestore):\n    disease_drug \u003d {}\n    result \u003d triplestore.execute_query (query)\n    for bind in result.bindings:\n        chem_disease \u003d bind[\u0027chem_disease\u0027].value.rsplit(\u0027/\u0027, 1)[-1]\n        mesh_id \u003d bind[\u0027meshid\u0027].value.rsplit(\u0027/\u0027, 1)[-1].upper ()\n        #compound \u003d bind[\u0027compound\u0027].value.rsplit(\u0027/\u0027, 1)[-1]\n        drug \u003d bind[\u0027drug\u0027].value.rsplit(\u0027/\u0027, 1)[-1]\n        disease_drug[mesh_id] \u003d drug\n    return disease_drug\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:30:41 AM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384835_-1520134935",
      "id": "20170307-203132_2103117686",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 11:30:41 AM",
      "dateFinished": "Mar 20, 2017 11:30:41 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n* Define the triplestore.\n* Build the disease compound map.\n* Build the disease ontology hierarchy map.",
      "dateUpdated": "Mar 14, 2017 11:45:04 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003eDefine the triplestore.\u003c/li\u003e\n  \u003cli\u003eBuild the disease compound map.\u003c/li\u003e\n  \u003cli\u003eBuild the disease ontology hierarchy map.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384836_-1522058680",
      "id": "20170307-205410_646587966",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ntriplestore_uri \u003d \"http://stars-blazegraph.renci.org/bigdata/sparql\"\ntriplestore \u003d TripleStore (triplestore_uri)\n\n\u0027\u0027\u0027\ndisease_drug \u003d get_disease_drug_associations (triplestore)\nhierarchy_map \u003d parse_ontology ()\n\nfor term_id in hierarchy_map:\n    disease \u003d hierarchy_map [term_id]\n    if disease.xref in disease_drug:\n        drug \u003d disease_drug [disease.xref]\n    print (\"disease item: {0} is treated by: {1}\".format (term_id, drug))\n\u0027\u0027\u0027\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:30:49 AM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u0027\\ndisease_drug \u003d get_disease_drug_associations (triplestore)\\nhierarchy_map \u003d parse_ontology ()\\nfor term_id in hierarchy_map:\\n    disease \u003d hierarchy_map [term_id]\\n    if disease.xref in disease_drug:\\n        drug \u003d disease_drug [disease.xref]\\n    print (\"disease item: {0} is treated by: {1}\".format (term_id, drug))\\n\u0027\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384837_-1522443429",
      "id": "20170307-203207_1627629988",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 11:30:49 AM",
      "dateFinished": "Mar 20, 2017 11:30:49 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n#disease_matrix \u003d defaultdict(list)\n#for disease_id in disease_drug:\n#    for disease_id2 in disease_drug:\n#        disease_matrix [disease_id].append (0)\n#print (len (disease_matrix))\nimport pandas as pd\nimport sys\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom numpy import dot, sqrt, array\n\n#from Levenshtein import distance\n#from Levenshtein import levenshtein\n#disease_matrix \u003d defaultdict(int)\n\ndef cooccurrence_matrix(disease_matrix):\n    disease_matrix \u003d defaultdict(lambda : defaultdict(list))\n    disease_drug \u003d get_disease_drug_associations (triplestore)\n    hierarchy_map \u003d parse_ontology ()\nfor term_id in hierarchy_map:\n    disease \u003d hierarchy_map [term_id]\n    if disease.xref in disease_drug:\n        drug \u003d disease_drug [disease.xref]\n    #print (\"disease item: {0} is treated by: {1}\".format (term_id, drug))\n    #print (len (disease_matrix))\nd \u003d cooccurrence_matrix(disease_matrix)\nprint disease_matrix\n\ndef get_sorted_vocab(disease_matrix):\n    vocab \u003d set([])\n    for w1, val_dict in disease_matrix:\n        vocab.add(w1)\n        for w2 in val_dict.iterkeys():\n            vocab.add(w2)\n    vocab \u003d sorted(list(vocab))\n    return vocab\n\n\n\ndef cosine_similarity_matrix(disease_matrix):\n    cm \u003d defaultdict(dict)\n    vectors \u003d get_vectors(disease_matrix)\n    for w1 in disease_matrix:\n        for w2 in disease_matrix:\n            cm[w1][w2] \u003d cosim(vectors[w1], vectors[w2])\n    return cm\n\nvocab \u003d get_sorted_vocab(d)    \ncm \u003d cosine_similarity_matrix(vocab, d)\n\n    ",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 16, 2017 10:45:47 AM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488999384857_-1517826442",
      "id": "20170307-203223_871947982",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 16, 2017 10:45:47 AM",
      "dateFinished": "Mar 16, 2017 10:45:54 AM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom scipy.spatial.distance import euclidean, pdist, squareform\r\n\r\ndef similarity_func(u, v):\r\n    return 1/(1+euclidean(u,v))\r\n\r\nDF_var \u003d pd.DataFrame.from_dict(disease_matrix)\r\n#DF_var.index \u003d [\"\"]\r\ndists \u003d pdist(DF_var, similarity_func)\r\nDF_euclid \u003d pd.DataFrame(squareform(dists), columns\u003dDF_var.index, index\u003dDF_var.index)\r\nprint DF_euclid\r\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 16, 2017 11:01:35 AM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3146807549941764549.py\", line 346, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3146807549941764549.py\", line 334, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 8, in \u003cmodule\u003e\n  File \"/projects/stars/venv/lib/python2.7/site-packages/pandas/core/frame.py\", line 255, in __init__\n    copy\u003dcopy)\n  File \"/projects/stars/venv/lib/python2.7/site-packages/pandas/core/frame.py\", line 432, in _init_ndarray\n    return create_block_manager_from_blocks([values], [columns, index])\n  File \"/projects/stars/venv/lib/python2.7/site-packages/pandas/core/internals.py\", line 3993, in create_block_manager_from_blocks\n    construction_error(tot_items, blocks[0].shape[1:], axes, e)\n  File \"/projects/stars/venv/lib/python2.7/site-packages/pandas/core/internals.py\", line 3970, in construction_error\n    passed, implied))\nValueError: Shape of passed values is (1, 1), indices imply (0, 0)\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384858_-1516672195",
      "id": "20170308-110320_1712021252",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 16, 2017 11:01:35 AM",
      "dateFinished": "Mar 16, 2017 11:01:35 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport pronto\nimport pandas as pd\nimport sys\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom numpy import dot, sqrt, array\n\nclass Disease(object):\n    def __init__ (self, term, xref, lineage):\n        self.mesh_id \u003d xref\n        self.lineage \u003d lineage\n        self.drugs \u003d []\n        self.term \u003d term\n\n#disease_ont \u003d {}\n\ndef parse_ontology ():\n    ont \u003d pronto.Ontology (\u0027/projects/stars/m2m/var/diseaseontology/dis.obo\u0027)\n    \u0027\u0027\u0027 print (ont.json) \u0027\u0027\u0027\n    hierarchy_map \u003d {}\n    for term in ont:\n        xref \u003d None\n        if \u0027xref\u0027 in term.other:\n            for x in term.other[\u0027xref\u0027]:\n                if x.startswith (\"MESH:\"):\n                    xref \u003d x\n                    #disease_ont[term.id.upper()] \u003d term\n                    lineage \u003d map ( lambda t : t.id, term.rparents ())\n                    sorted_lineage \u003d sorted (lineage, key\u003dlambda e : int(e.split(\u0027:\u0027)[1]))\n                    disease \u003d Disease (term\u003dterm, xref\u003dxref, lineage\u003dsorted_lineage)\n                    hierarchy_map[term.id.upper ()] \u003d disease\n                    break\n    #for k in hierarchy_map:\n    #    print (\"{0} {1} {2}\".format (k, hierarchy_map[k].mesh_id, hierarchy_map[k].lineage))\n    return hierarchy_map\n    \ndef get_disease_drug_associations (triplestore):\n    disease_drug \u003d defaultdict(list)\n    result \u003d triplestore.execute_query (query)\n    for bind in result.bindings:\n        mesh_id \u003d bind[\u0027meshid\u0027].value.rsplit(\u0027/\u0027, 1)[-1].upper ()\n        drug \u003d bind[\u0027drug\u0027].value.rsplit(\u0027/\u0027, 1)[-1]\n        drug_id \u003d int(drug.replace (\u0027DB\u0027, \u0027\u0027))\n        if not drug_id in disease_drug[mesh_id]:\n            disease_drug[mesh_id].append (drug_id)\n    return disease_drug\n\ndef print_groups (groups):\n    for path in groups:\n        print (\"path {0}\".format (path))\n        for disease in groups[path]:\n            try:\n                print (\"  \u003e {0}({1})\u003c-({2} drugs)\".format (disease.term.name, disease.mesh_id, len(disease.drugs)))\n            except Exception:\n                traceback.print_exc ()\n\ndef cooccurrence_matrix():\n    disease_matrix \u003d defaultdict(list)\n    disease_drug \u003d get_disease_drug_associations (triplestore)\n    disease_ontology \u003d parse_ontology ()\n    for term_id in disease_ontology:\n        disease \u003d disease_ontology [term_id]\n        if disease.mesh_id in disease_drug:\n            drug \u003d disease_drug [disease.mesh_id]\n\n    \u0027\u0027\u0027 Bind Disease Ontology data to Disease Drug associations. \u0027\u0027\u0027\n    nodes \u003d defaultdict(int)\n    for mesh_id, disease in disease_ontology.iteritems ():\n        if len(disease.lineage) \u003c 5:\n            continue\n        key \u003d \"/\".join (disease.lineage)\n        nodes[key] \u003d nodes[key] + 1\n\n    \u0027\u0027\u0027 For nodes with more than some threshold number of children: \u0027\u0027\u0027\n    threshold \u003d 3\n    groups \u003d defaultdict(list)\n    for path in nodes:\n        if nodes[path] \u003e threshold:\n            term_id \u003d path.split(\u0027/\u0027)[-1]\n            for doid, disease in disease_ontology.iteritems ():\n                # Match appropriate drug indications to disease object:\n                if len(disease.lineage) \u003e 0 and term_id \u003d\u003d disease.lineage[-1] and disease.mesh_id in disease_drug:\n                    disease.drugs \u003d disease_drug [disease.mesh_id]\n                    groups[path].append (disease)\n                    #print (\"{0}: {1} arity:{2} ({3}) drugs:{4}\".format (path, disease.term.name, nodes[n], disease.xref, disease.drugs))\n    return groups\n    \ngroups \u003d cooccurrence_matrix()",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:31:32 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384858_-1516672195",
      "id": "20170308-134818_1626412406",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 11:31:32 AM",
      "dateFinished": "Mar 20, 2017 11:31:36 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndef print_groups_to_drugs (groups_to_drugs):\n    for g in groups_to_drugs:\n        print (\"{0} -\u003e \".format (g[0]))\n        for d in g[1]:\n            print (\"  \u003e {0}\".format (sorted (d)))\ngroups_to_drugs \u003d map (lambda p : (p[0], map (lambda disease : disease.drugs, p[1])), groups.iteritems ())\n#print_groups_to_drugs (groups_to_drugs)",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:31:44 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1489679044703_-2007433404",
      "id": "20170316-114404_361983056",
      "dateCreated": "Mar 16, 2017 11:44:04 AM",
      "dateStarted": "Mar 20, 2017 11:31:44 AM",
      "dateFinished": "Mar 20, 2017 11:31:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport numpy as np\nfrom sklearn.metrics import jaccard_similarity_score\n\ndef reshape_array (source, target):\n    N \u003d np.zeros (target.shape)\n    N[:source.shape[0]] \u003d source\n    return N\n\ndef reshape_arrays (L, R):\n    bigger \u003d max (L.size, R.size)\n    if bigger \u003d\u003d L.size:\n        R \u003d reshape_array (R, L)\n    else:\n        L \u003d reshape_array (L, R)\n    return L, R\n\ndef make_arrays (A, B):\n    L \u003d np.array (A)\n    R \u003d np.array (B)\n    return reshape_arrays (L, R)\n    \ndef average_treatment_set_similarity (drug_lists):\n    import numpy as np\n    from sklearn.metrics import jaccard_similarity_score\n    similarities \u003d []\n    for index, drug_list in enumerate (drug_lists):\n        for index2, drug_list2 in enumerate (drug_lists):\n            if index \u003d\u003d index2 or len(drug_list) \u003d\u003d 0 or len(drug_list2) \u003d\u003d 0:\n                continue\n            L, R \u003d make_arrays (drug_list, drug_list2)\n            similarity \u003d jaccard_similarity_score (L, R)\n            #print (\"   s\u003e {0}\".format (similarity))\n            #print (\"L: {0}\".format (L))\n            #print (\"R: {0}\".format (R))\n            similarities.append (similarity)\n    return np.mean (np.array (similarities))",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:31:52 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1489679844494_163866104",
      "id": "20170316-115724_744208111",
      "dateCreated": "Mar 16, 2017 11:57:24 AM",
      "dateStarted": "Mar 20, 2017 11:31:52 AM",
      "dateFinished": "Mar 20, 2017 11:31:52 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe need to stop trying to print every drug array. The browser just can\u0027t take it.\nSo here\u0027s what the output of average_treatment_set_similarity() looks like for one iteration of a drug array comparison:\nThis is a case where there is intersection. The majority of the cases I\u0027ve seen have none.\n\n   s\u003e 0.0166666666667\nL: [1136 2877 1592  472  749  291 1166   14  841 1093 1143  431  381 4115  412\n 3895  262 3320 1181 4665  445  163  531  657  544 4827  898  695 1214  461\n 1017 1183 1064  252  816  541  203 1104  316  799  277 4499  255  997  755\n  982 3496 2656 1196  683  325 1174  727  312  481 1645  818  834 2546 2375]\nR: [ 2699.  2877.  4253.  1592.  1093.   431.   974.   412.   262.   304.\n   163.  1101.   544.   531.  1779.  4827.   898.  2757.  1275.   763.\n   252.  1039.   910.   550.   316.  3587.  1030.   255.  4348.   997.\n  1164.   755.   982.   759.  2656.  1759.   481.  1645.  4652.     0.\n     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.\n     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.]\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 11:32:00 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe need to stop trying to print every drug array. The browser just can\u0026rsquo;t take it.\u003cbr/\u003eSo here\u0026rsquo;s what the output of average_treatment_set_similarity() looks like for one iteration of a drug array comparison:\u003cbr/\u003eThis is a case where there is intersection. The majority of the cases I\u0026rsquo;ve seen have none.\u003c/p\u003e\n\u003cp\u003es\u0026gt; 0.0166666666667\u003cbr/\u003eL: [1136 2877 1592 472 749 291 1166 14 841 1093 1143 431 381 4115 412\u003cbr/\u003e 3895 262 3320 1181 4665 445 163 531 657 544 4827 898 695 1214 461\u003cbr/\u003e 1017 1183 1064 252 816 541 203 1104 316 799 277 4499 255 997 755\u003cbr/\u003e 982 3496 2656 1196 683 325 1174 727 312 481 1645 818 834 2546 2375]\u003cbr/\u003eR: [ 2699. 2877. 4253. 1592. 1093. 431. 974. 412. 262. 304.\u003cbr/\u003e 163. 1101. 544. 531. 1779. 4827. 898. 2757. 1275. 763.\u003cbr/\u003e 252. 1039. 910. 550. 316. 3587. 1030. 255. 4348. 997.\u003cbr/\u003e 1164. 755. 982. 759. 2656. 1759. 481. 1645. 4652. 0.\u003cbr/\u003e 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\u003cbr/\u003e 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489687671517_693885490",
      "id": "20170316-140751_2120034147",
      "dateCreated": "Mar 16, 2017 2:07:51 PM",
      "dateStarted": "Mar 20, 2017 11:32:00 AM",
      "dateFinished": "Mar 20, 2017 11:32:00 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nanalysis \u003d map (lambda p : (p[0], average_treatment_set_similarity (p[1]) ), groups_to_drugs[:15])\nprint analysis\n\nanalysis_nonzero \u003d dict((k, v) for k, v in average_treatment_set_similarity.iteritems() if v \u003e 0)\n#analysis_nonzero \u003d filter (lambda p : (p[0], analysis (p[1] \u003e 0.0) ), groups_to_drugs[:15])\n#analysis_nonzero \u003d filter(lambda x : analysis[x] \u003e 0.0, analysis[0])\n#print analysis_nonzero",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 12:09:25 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "[(u\u0027DOID:4/DOID:4844/DOID:14566/DOID:0060072/DOID:0060084/DOID:0060101\u0027, nan), (u\u0027DOID:4/DOID:1564/DOID:2473/DOID:0050117/DOID:0050136\u0027, 0.16666666666666666), (u\u0027DOID:4/DOID:162/DOID:3119/DOID:14566/DOID:0050686\u0027, 0.016010098796763701), (u\u0027DOID:4/DOID:7/DOID:863/DOID:1492/DOID:5614/DOID:5679/DOID:0050155\u0027, 0.0093155393098799995), (u\u0027DOID:4/DOID:655/DOID:9252/DOID:0014667/DOID:0060159\u0027, nan), (u\u0027DOID:4/DOID:14566/DOID:0060072/DOID:0060085/DOID:0060089\u0027, 0.024813099974737907), (u\u0027DOID:4/DOID:7/DOID:17/DOID:65/DOID:381/DOID:3342/DOID:0080001\u0027, 0.060185185185185182), (u\u0027DOID:4/DOID:150/DOID:8670/DOID:0060037/DOID:0060038\u0027, 0.14285714285714285), (u\u0027DOID:4/DOID:7/DOID:850/DOID:1579/DOID:3082/DOID:0050161\u0027, 0.015194806053232467), (u\u0027DOID:4/DOID:7/DOID:863/DOID:2742/DOID:2952/DOID:0050155\u0027, 0.0093155393098799995), (u\u0027DOID:4/DOID:655/DOID:3133/DOID:13268/DOID:0014667\u0027, 0.057367110421127042), (u\u0027DOID:4/DOID:7/DOID:178/DOID:1287/DOID:6713/DOID:0050828\u0027, 0.016690765331020208), (u\u0027DOID:4/DOID:162/DOID:3069/DOID:3070/DOID:14566/DOID:0050687\u0027, 0.085676493807491552), (u\u0027DOID:4/DOID:7/DOID:74/DOID:2914/DOID:9500\u0027, 0.10000000000000001), (u\u0027DOID:4/DOID:655/DOID:1168/DOID:3146/DOID:0014667\u0027, 0.057367110421127042)]\n"
          },
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-7509758736875787090.py\", line 346, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-7509758736875787090.py\", line 339, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 3, in \u003cmodule\u003e\nAttributeError: \u0027function\u0027 object has no attribute \u0027iteritems\u0027\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489680059422_1674480586",
      "id": "20170316-120059_1677981891",
      "dateCreated": "Mar 16, 2017 12:00:59 PM",
      "dateStarted": "Mar 20, 2017 12:09:25 PM",
      "dateFinished": "Mar 20, 2017 12:09:27 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndata \u003d map (lambda p : ( p[0], map (lambda d : d.drugs, p[1]) ), groups.iteritems ())\nspark_groups \u003d sc.parallelize (data)\nspark_groups.\\\n    map (lambda p : ( p[0], average_treatment_set_similarity (p[1]) )).\\\n    collect ()",
      "user": "ad\\scox",
      "dateUpdated": "Mar 16, 2017 6:45:56 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-8787467119452570828.py\", line 346, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-8787467119452570828.py\", line 334, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\nNameError: name \u0027groups\u0027 is not defined\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489680196400_1206842106",
      "id": "20170316-120316_385068130",
      "dateCreated": "Mar 16, 2017 12:03:16 PM",
      "dateStarted": "Mar 16, 2017 6:45:56 PM",
      "dateFinished": "Mar 16, 2017 6:45:56 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\nwhoami\necho python path $PYTHONPATH\npython -c \"import numpy as np; print(\u0027hi\u0027)\"\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 16, 2017 2:35:55 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "evryscope\npython path\nhi\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489688260541_-1366004281",
      "id": "20170316-141740_1315825988",
      "dateCreated": "Mar 16, 2017 2:17:40 PM",
      "dateStarted": "Mar 16, 2017 2:35:55 PM",
      "dateFinished": "Mar 16, 2017 2:35:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 16, 2017 2:35:12 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1489689312545_1221521251",
      "id": "20170316-143512_120618013",
      "dateCreated": "Mar 16, 2017 2:35:12 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "/M2M/DiseaseOntologyChem2Bio2RDF_ruhi",
  "id": "2CCC35MHW",
  "angularObjects": {
    "2C8PNVW4G:shared_process": [],
    "2C9M4A84U:shared_process": [],
    "2C8JB5J2A:shared_process": [],
    "2C8UPVAV8:shared_process": [],
    "2CB6QSJQK:shared_process": [],
    "2CB4GRYA4:shared_process": [],
    "2CAZ1XA1G:shared_process": [],
    "2CBGUDB9H:shared_process": [],
    "2C9VT2CHD:shared_process": [],
    "2CBBPS1GQ:shared_process": [],
    "2CAYF7YMG:shared_process": [],
    "2C7NS2RPM:shared_process": [],
    "2C9WWVYVN::2CCC35MHW": [],
    "2CB55MCKF:shared_process": [],
    "2C9P6TDB4:shared_process": [],
    "2C7YD2D51:shared_process": [],
    "2C9UAC7QR:shared_process": [],
    "2C8K1VZ6J:shared_process": [],
    "2CA9JMF94:shared_process": []
  },
  "config": {},
  "info": {}
}