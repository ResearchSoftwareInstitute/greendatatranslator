{
  "paragraphs": [
    {
      "text": "%md\n## Problem\nWe\u0027d like to know how reflective the [disease ontology](http://disease-ontology.org/) is of chemical realities. Do diseases classified together by the ontology respond to treatment by the same chemical compounds?\n\n## Approach\n\nFirst we\u0027ll build \n\n* a data structure for the disease ontology\n* a map of associations between diseases and compounds\n\n### 1.0 : Build the Disease Ontology Data Structure\n* Downloaded the disease ontology in the [OBO](https://en.wikipedia.org/wiki/Open_Biomedical_Ontologies) format.\n* Installed the pronto Python library that includes an OBO parser.\n* Parsed the ontology and encoded each element as Element.ID\u003d\u003e[ MESH.ID, Lineage ].\n* That is, a map of element id to an object containing mesh id and the list of ancestors of each node up the ontology hierarchy.\n\n### 1.1 : Build the Graph of Disease to Chemical Compound \n* Query Blazegraph, for now, focusing on CTD to get disease -\u003e compound associations\n* Create a map of disease id to compound\n\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 22, 2017 11:03:57 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eProblem\u003c/h2\u003e\n\u003cp\u003eWe\u0026rsquo;d like to know how reflective the \u003ca href\u003d\"http://disease-ontology.org/\"\u003edisease ontology\u003c/a\u003e is of chemical realities. Do diseases classified together by the ontology respond to treatment by the same chemical compounds?\u003c/p\u003e\n\u003ch2\u003eApproach\u003c/h2\u003e\n\u003cp\u003eFirst we\u0026rsquo;ll build \u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ea data structure for the disease ontology\u003c/li\u003e\n  \u003cli\u003ea map of associations between diseases and compounds\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e1.0 : Build the Disease Ontology Data Structure\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eDownloaded the disease ontology in the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Open_Biomedical_Ontologies\"\u003eOBO\u003c/a\u003e format.\u003c/li\u003e\n  \u003cli\u003eInstalled the pronto Python library that includes an OBO parser.\u003c/li\u003e\n  \u003cli\u003eParsed the ontology and encoded each element as Element.ID\u003d\u0026gt;[ MESH.ID, Lineage ].\u003c/li\u003e\n  \u003cli\u003eThat is, a map of element id to an object containing mesh id and the list of ancestors of each node up the ontology hierarchy.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e1.1 : Build the Graph of Disease to Chemical Compound\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eQuery Blazegraph, for now, focusing on CTD to get disease -\u0026gt; compound associations\u003c/li\u003e\n  \u003cli\u003eCreate a map of disease id to compound\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384830_-1604394944",
      "id": "20170307-203540_90526252",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 22, 2017 11:03:57 AM",
      "dateFinished": "Mar 22, 2017 11:03:58 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nFirst, define a class for interacting with a triplestore.",
      "user": "ad\\scox",
      "dateUpdated": "Mar 22, 2017 9:24:12 AM",
      "config": {
        "enabled": true,
        "tableHide": true,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eFirst, define a class for interacting with a triplestore.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384831_-1604779693",
      "id": "20170307-205035_346909513",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 17, 2017 3:04:57 PM",
      "dateFinished": "Mar 17, 2017 3:04:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport traceback\nfrom SPARQLWrapper import SPARQLWrapper2, JSON\nfrom collections import defaultdict\n\nclass TripleStore(object):\n    def __init__(self, hostname):\n        self.service \u003d  SPARQLWrapper2 (hostname)\n    def execute_query (self, query):\n        self.service.setQuery (query)\n        self.service.setReturnFormat (JSON)\n        return self.service.query().convert ()\n    def execute_query_file (self, query_file):\n        result \u003d None\n        with open (query_file, \"r\") as stream:\n            query \u003d stream.read ()\n            result \u003d self.execute_query (query)\n        return result\n       ",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:07:21 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384832_-1520519684",
      "id": "20170307-202834_465623601",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 23, 2017 2:07:21 PM",
      "dateFinished": "Mar 23, 2017 2:07:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThen load the disease ontology and turn it into a map of term ids to pairs of mesh ids and ontological lineages.",
      "dateUpdated": "Mar 8, 2017 1:56:24 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThen load the disease ontology and turn it into a map of term ids to pairs of mesh ids and ontological lineages.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384832_-1520519684",
      "id": "20170307-205113_1015121974",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nDefine our [blazegraph](http://stars-blazegraph.renci.org/blazegraph/#query) query.",
      "dateUpdated": "Mar 8, 2017 1:56:24 PM",
      "config": {
        "enabled": true,
        "tableHide": true,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eDefine our \u003ca href\u003d\"http://stars-blazegraph.renci.org/blazegraph/#query\"\u003eblazegraph\u003c/a\u003e query.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384834_-1519750186",
      "id": "20170307-205252_117835410",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nquery \u003d \"\"\"\nPREFIX db_resource:      \u003chttp://chem2bio2rdf.org/drugbank/resource/\u003e\nPREFIX ctd_chem_disease: \u003chttp://chem2bio2rdf.org/ctd/resource/ctd_chem_disease/\u003e \nPREFIX biordf:           \u003chttp://bio2rdf.org/\u003e\nPREFIX ctd:              \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\nPREFIX pubchem:          \u003chttp://chem2bio2rdf.org/ctd/resource/\u003e\nSELECT DISTINCT ?drug ?chem_disease ?meshid ?compound\nWHERE {\n\n  ?drug         db_resource:CID ?compound .\n  ?chem_disease ctd:diseaseid ?meshid .\n  ?chem_disease ctd:cid       ?compound \n}\n\"\"\"",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:07:24 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1490103091753_-1277403744",
      "id": "20170321-093131_160041978",
      "dateCreated": "Mar 21, 2017 9:31:31 AM",
      "dateStarted": "Mar 23, 2017 2:07:24 PM",
      "dateFinished": "Mar 23, 2017 2:07:24 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nDefine a function to run the query, parse the response, and return a map of disease to compound where the key is a MESH id.",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 21, 2017 12:05:06 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488999384835_-1520134935",
      "id": "20170307-205321_210744016",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 21, 2017 12:04:54 PM",
      "dateFinished": "Mar 21, 2017 12:04:54 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:19:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cpre\u003e\u003ccode\u003epath DOID:4/DOID:4844/DOID:14566/DOID:0060072/DOID:0060084/DOID:0060101\n    \u0026gt; subependymal giant cell astrocytoma(MESH:D001254)\u0026lt;-(1 drugs)\npath DOID:4/DOID:1564/DOID:2473/DOID:0050117/DOID:0050136\n    \u0026gt; candidiasis(MESH:D002177)\u0026lt;-(1 drugs)\n    \u0026gt; vulvovaginal candidiasis(MESH:D002181)\u0026lt;-(5 drugs)\n    \u0026gt; pneumocystosis(MESH:D011020)\u0026lt;-(1 drugs)\n    \u0026gt; oral candidiasis(MESH:D002180)\u0026lt;-(5 drugs)\npath DOID:4/DOID:162/DOID:3119/DOID:14566/DOID:0050686\n    \u0026gt; gallbladder cancer(MESH:D005706)\u0026lt;-(60 drugs)\n    \u0026gt; cribriform carcinoma(MESH:D000230)\u0026lt;-(148 drugs)\n    \u0026gt; thyroid carcinoma(MESH:D013964)\u0026lt;-(66 drugs)\n    \u0026gt; cerebral primitive neuroectodermal tumor(MESH:D018242)\u0026lt;-(15 drugs)\n    \u0026gt; pharynx cancer(MESH:D010610)\u0026lt;-(1 drugs)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490289481291_-1301950946",
      "id": "20170323-131801_205176799",
      "dateCreated": "Mar 23, 2017 1:18:01 PM",
      "dateStarted": "Mar 23, 2017 2:17:14 PM",
      "dateFinished": "Mar 23, 2017 2:17:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndef print_groups ():\n    for g in groups:\n        print (g)\n        print (\"{0} -\u003e \".format (g))\n        for d in groups[g]:\n            print (\"  \u003e {0}\".format ())\n  ",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:18:49 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384835_-1520134935",
      "id": "20170307-203132_2103117686",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 23, 2017 2:18:49 PM",
      "dateFinished": "Mar 23, 2017 2:18:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n* Define the triplestore.\n* Build the disease compound map.\n* Build the disease ontology hierarchy map.",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 21, 2017 12:56:01 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003eDefine the triplestore.\u003c/li\u003e\n  \u003cli\u003eBuild the disease compound map.\u003c/li\u003e\n  \u003cli\u003eBuild the disease ontology hierarchy map.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384836_-1522058680",
      "id": "20170307-205410_646587966",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 2:08:39 PM",
      "dateFinished": "Mar 20, 2017 2:08:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n##changedfor drugmatrix\ntriplestore_uri \u003d \"http://stars-blazegraph.renci.org/bigdata/sparql\"\ntriplestore \u003d TripleStore (triplestore_uri)\n\nimport pronto\nimport pandas as pd\nimport sys\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom numpy import dot, sqrt, array\n\nclass Drug(object):\n    def __init__ (self, DBID, Generic_Name,lineage):\n        self.mesh_id \u003d Generic_Name\n        self.lineage \u003d lineage\n        self.disease \u003d []\n        self.Generic_Name \u003d Generic_Name\n       ",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:07:32 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1490277614146_-90340636",
      "id": "20170323-100014_785207467",
      "dateCreated": "Mar 23, 2017 10:00:14 AM",
      "dateStarted": "Mar 23, 2017 2:07:32 PM",
      "dateFinished": "Mar 23, 2017 2:07:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n##changedfor drugmatrix\n\ndef get_disease_drug_associations (triplestore):\n    #drug_assoc \u003d get_disease_drug_association(triplestore)\n    result \u003d triplestore.execute_query (query)\n    disease_drug \u003d {}\n    for DB in result:\n        Generic_Name \u003d None\n        if \u0027Generic_Name\u0027 in DB.other:\n            for x in DB.other[\u0027Generic_Name\u0027]:\n                if x.startswith (\"mesh:\"):\n                    Generic_Name \u003d x\n                    #disease_ont[term.id.upper()] \u003d term\n                    lineage \u003d map ( lambda t : t.id, DBID.rparents ())\n                    sorted_lineage \u003d sorted (lineage, key\u003dlambda e : int(e.split(\u0027:\u0027)[1]))\n                    drug \u003d Drug (DB\u003dDB, Generic_Name\u003dGeneric_Name, lineage\u003dsorted_lineage)\n                    disease_drug[DB.id.upper ()] \u003d drug\n                    break\n    #for k in disease_drug:\n        #print (\"{0} {1} {2}\".format (k, disease_drug[k].mesh_id, disease_drug[k].lineage))\n    return disease_drug\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:24:57 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1490279901668_-1058906336",
      "id": "20170323-103821_354165981",
      "dateCreated": "Mar 23, 2017 10:38:21 AM",
      "dateStarted": "Mar 23, 2017 2:24:57 PM",
      "dateFinished": "Mar 23, 2017 2:24:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n##changedfor drugmatrix\nont \u003d pronto.Ontology (\u0027/projects/stars/m2m/var/diseaseontology/dis.obo\u0027)\ndef parse_ontology (ont):\n    #ont \u003d pronto.Ontology (\u0027/projects/stars/m2m/var/diseaseontology/dis.obo\u0027)\n    \u0027\u0027\u0027 print (ont.json) \u0027\u0027\u0027\n    hierarchy_map \u003d defaultdict(list)\n    for bind in ont:\n        mesh_id \u003d bind[\u0027MESH:\u0027].value.rsplit(\u0027/\u0027, 1)[-1].upper ()\n        disease \u003d bind[\u0027xref\u0027].value.rsplit(\u0027/\u0027, 1)[-1]\n        disease_id \u003d int(disease.replace (\u0027DOID\u0027, \u0027\u0027))\n        if not disease_id in hierarchy_map[mesh_id]:\n            hierarchy_map[mesh_id].append (disease_id)\n       \n    return hierarchy_map\n   ",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:07:44 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1490277613814_148203682",
      "id": "20170323-100013_1264862257",
      "dateCreated": "Mar 23, 2017 10:00:13 AM",
      "dateStarted": "Mar 23, 2017 2:07:44 PM",
      "dateFinished": "Mar 23, 2017 2:07:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n##changedfor drugmatrix\n\ndef print_groups (groups):\n    for path in groups:\n        print (\"path {0}\".format (path))\n        for drug in groups[path]:\n            try:\n                print (\"  \u003e {0}({2})\u003c-({1} diseases)\".format (drug.Generic_Name, drug.mesh_id, len(drug.diseases)))\n            except Exception:\n                traceback.print_exc ()",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:07:54 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1490280089162_-942652516",
      "id": "20170323-104129_1003549522",
      "dateCreated": "Mar 23, 2017 10:41:29 AM",
      "dateStarted": "Mar 23, 2017 2:07:54 PM",
      "dateFinished": "Mar 23, 2017 2:07:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n##changedfor drugmatrix\n\ndef cooccurrence_matrix():\n    #disease_matrix \u003d defaultdict(list)\n    disease_ontology \u003d parse_ontology (ont)\n    disease_drug \u003d  get_disease_drug_associations ()\n    for DBID_id in disease_drug:\n        drug \u003d disease_drug [DBID_id]\n        if drug.mesh_id in disease_ontology:\n            disease \u003d disease_ontology [drug.mesh_id]\n\n    \u0027\u0027\u0027 Bind Disease Ontology data to Disease Drug associations. \u0027\u0027\u0027\n    nodes \u003d defaultdict(int)\n    for mesh_id, drug in disease_drug.iteritems ():\n        if len(drug.lineage) \u003c 5:\n            continue\n        key \u003d \"/\".join (drug.lineage)\n        nodes[key] \u003d nodes[key] + 1\n\n    \u0027\u0027\u0027 For nodes with more than some threshold number of children: \u0027\u0027\u0027\n    threshold \u003d 3\n    groups \u003d defaultdict(list)\n    for path in nodes:\n        if nodes[path] \u003e threshold:\n            DBID_id \u003d path.split(\u0027/\u0027)[-1]\n            for drug.mesh_id, drug in disease_drug.iteritems ():\n                # Match appropriate drug indications to disease object:\n                if len(drug.lineage) \u003e 0 and DBID_id \u003d\u003d drug.lineage[-1] and drug.mesh_id in disease_ontology:\n                    drug.diseases \u003d disease_drug [drug.mesh_id]\n                    groups[path].append (drug)\n                    #print (\"{0}: {1} arity:{2} ({3}) drugs:{4}\".format (path, disease.term.name, nodes[n], disease.xref, disease.drugs))\n    return groups\n    \ngroups \u003d cooccurrence_matrix()\n#print groups",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 23, 2017 2:26:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-7823861029578108822.py\", line 346, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-7823861029578108822.py\", line 339, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 26, in \u003cmodule\u003e\n  File \"\u003cstdin\u003e\", line 2, in cooccurrence_matrix\n  File \"\u003cstdin\u003e\", line 6, in parse_ontology\nTypeError: \u0027Term\u0027 object has no attribute \u0027__getitem__\u0027\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490280301717_677418357",
      "id": "20170323-104501_1913161026",
      "dateCreated": "Mar 23, 2017 10:45:01 AM",
      "dateStarted": "Mar 23, 2017 2:26:15 PM",
      "dateFinished": "Mar 23, 2017 2:26:15 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport numpy as np\nfrom sklearn.metrics import jaccard_similarity_score\n\ndef reshape_array (source, target):\n    N \u003d np.zeros (target.shape)\n    N[:source.shape[0]] \u003d source\n    return N\n\ndef reshape_arrays (L, R):\n    bigger \u003d max (L.size, R.size)\n    if bigger \u003d\u003d L.size:\n        R \u003d reshape_array (R, L)\n    else:\n        L \u003d reshape_array (L, R)\n    return L, R\n\ndef make_arrays (A, B):\n    L \u003d np.array (A)\n    R \u003d np.array (B)\n    return reshape_arrays (L, R)\n    \ndef average_treatment_set_similarity (drug_lists):\n    import numpy as np\n    from sklearn.metrics import jaccard_similarity_score\n    similarities \u003d []\n    for index, drug_list in enumerate (drug_lists):\n        for index2, drug_list2 in enumerate (drug_lists):\n            if index \u003d\u003d index2:\n                continue\n            L, R \u003d make_arrays (drug_list, drug_list2)\n            similarity \u003d jaccard_similarity_score (L, R)\n            #print (\"   s\u003e {0}\".format (similarity))\n            #print (\"L: {0}\".format (L))\n            #print (\"R: {0}\".format (R))\n            similarities.append (similarity)\n    return np.mean (np.array (similarities)).item ()\n    ",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 22, 2017 12:35:14 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384857_-1517826442",
      "id": "20170307-203223_871947982",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 22, 2017 12:35:14 PM",
      "dateFinished": "Mar 22, 2017 12:35:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\r\nimport math\r\nfrom pyspark.sql.types import *\r\n\r\npath_key \u003d {}\r\nfor k, v in groups.iteritems ():\r\n    path_key [k] \u003d k.split (\u0027/\u0027)[-1]\r\nfor k in path_key:\r\n    v \u003d groups[k]\r\n    del groups[k]\r\n    groups[path_key[k]] \u003d v\r\n\r\ndata \u003d map (lambda p : (p[0], map(lambda d : d.disease, p[1])),\r\n    groups.iteritems ())\r\nspark_groups \u003d sc.parallelize (data). \\\r\n    map (lambda p : ( p[0].split (\u0027/\u0027)[-1],\r\n        average_treatment_set_similarity (p[1]) )). \\\r\n    filter (lambda p : not math.isnan (float(p[1])))\r\n\r\nspark_groups.toDF().registerTempTable(\"diseases\")\r\n    \r\nschemaString \u003d \"path sum\"\r\nfields \u003d [StructField(field_name, StringType(), True) for field_name in schemaString.split()]\r\nschema \u003d StructType(fields)\r\nschema_diseases \u003d sqlContext.\\\r\n    createDataFrame(spark_groups, schema). \\\r\n    registerTempTable(\"diseases_s\")\r\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 22, 2017 12:35:21 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-7823861029578108822.py\", line 346, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-7823861029578108822.py\", line 334, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 16, in \u003cmodule\u003e\n  File \"/projects/stars/stack/spark/spark2/python/pyspark/sql/session.py\", line 57, in toDF\n    return sparkSession.createDataFrame(self, schema, sampleRatio)\n  File \"/projects/stars/stack/spark/spark2/python/pyspark/sql/session.py\", line 522, in createDataFrame\n    rdd, schema \u003d self._createFromRDD(data.map(prepare), schema, samplingRatio)\n  File \"/projects/stars/stack/spark/spark2/python/pyspark/sql/session.py\", line 360, in _createFromRDD\n    struct \u003d self._inferSchema(rdd, samplingRatio)\n  File \"/projects/stars/stack/spark/spark2/python/pyspark/sql/session.py\", line 331, in _inferSchema\n    first \u003d rdd.first()\n  File \"/projects/stars/stack/spark/spark2/python/pyspark/rdd.py\", line 1331, in first\n    raise ValueError(\"RDD is empty\")\nValueError: RDD is empty\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488999384858_-1516672195",
      "id": "20170308-110320_1712021252",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 22, 2017 12:35:21 PM",
      "dateFinished": "Mar 22, 2017 12:35:21 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql select path, sum from diseases_s",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 21, 2017 11:54:17 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql"
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488999384858_-1516672195",
      "id": "20170308-134818_1626412406",
      "dateCreated": "Mar 8, 2017 1:56:24 PM",
      "dateStarted": "Mar 20, 2017 3:14:52 PM",
      "dateFinished": "Mar 20, 2017 3:14:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndef print_groups_to_drugs (groups_to_drugs):\n    for g in groups_to_drugs:\n        print (\"{0} -\u003e \".format (g[0]))\n        for d in g[1]:\n            print (\"  \u003e {0}\".format (sorted (d)))\ngroups_to_drugs \u003d map (lambda p : (p[0], map (lambda disease : disease.drugs, p[1])), groups.iteritems ())\n#print_groups_to_drugs (groups_to_drugs)",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 3:13:52 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1489679044703_-2007433404",
      "id": "20170316-114404_361983056",
      "dateCreated": "Mar 16, 2017 11:44:04 AM",
      "dateStarted": "Mar 20, 2017 3:13:52 PM",
      "dateFinished": "Mar 20, 2017 3:13:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport numpy as np\nfrom sklearn.metrics import jaccard_similarity_score\n\ndef reshape_array (source, target):\n    N \u003d np.zeros (target.shape)\n    N[:source.shape[0]] \u003d source\n    return N\n\ndef reshape_arrays (L, R):\n    bigger \u003d max (L.size, R.size)\n    if bigger \u003d\u003d L.size:\n        R \u003d reshape_array (R, L)\n    else:\n        L \u003d reshape_array (L, R)\n    return L, R\n\ndef make_arrays (A, B):\n    L \u003d np.array (A)\n    R \u003d np.array (B)\n    return reshape_arrays (L, R)\n    \ndef average_treatment_set_similarity (drug_lists):\n    import numpy as np\n    from sklearn.metrics import jaccard_similarity_score\n    similarities \u003d []\n    for index, drug_list in enumerate (drug_lists):\n        for index2, drug_list2 in enumerate (drug_lists):\n            if index \u003d\u003d index2 or len(drug_list) \u003d\u003d 0 or len(drug_list2) \u003d\u003d 0:\n                continue\n            L, R \u003d make_arrays (drug_list, drug_list2)\n            similarity \u003d jaccard_similarity_score (L, R)\n            #print (\"   s\u003e {0}\".format (similarity))\n            #print (\"L: {0}\".format (L))\n            #print (\"R: {0}\".format (R))\n            similarities.append (similarity)\n    return np.mean (np.array (similarities))",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 2:09:36 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1489679844494_163866104",
      "id": "20170316-115724_744208111",
      "dateCreated": "Mar 16, 2017 11:57:24 AM",
      "dateStarted": "Mar 20, 2017 2:09:36 PM",
      "dateFinished": "Mar 20, 2017 2:09:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe need to stop trying to print every drug array. The browser just can\u0027t take it.\nSo here\u0027s what the output of average_treatment_set_similarity() looks like for one iteration of a drug array comparison:\nThis is a case where there is intersection. The majority of the cases I\u0027ve seen have none.\n\n   s\u003e 0.0166666666667\nL: [1136 2877 1592  472  749  291 1166   14  841 1093 1143  431  381 4115  412\n 3895  262 3320 1181 4665  445  163  531  657  544 4827  898  695 1214  461\n 1017 1183 1064  252  816  541  203 1104  316  799  277 4499  255  997  755\n  982 3496 2656 1196  683  325 1174  727  312  481 1645  818  834 2546 2375]\nR: [ 2699.  2877.  4253.  1592.  1093.   431.   974.   412.   262.   304.\n   163.  1101.   544.   531.  1779.  4827.   898.  2757.  1275.   763.\n   252.  1039.   910.   550.   316.  3587.  1030.   255.  4348.   997.\n  1164.   755.   982.   759.  2656.  1759.   481.  1645.  4652.     0.\n     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.\n     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.]\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 2:09:49 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1489687671517_693885490",
      "id": "20170316-140751_2120034147",
      "dateCreated": "Mar 16, 2017 2:07:51 PM",
      "dateStarted": "Mar 20, 2017 2:09:49 PM",
      "dateFinished": "Mar 20, 2017 2:09:49 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nanalysis \u003d map (lambda p : (p[0], average_treatment_set_similarity (p[1]) ), groups_to_drugs[:20])\nprint analysis[0:10]\n\n\n#nan \u003d float(\u0027nan\u0027)\n#analysis_nonzero \u003d [i for i in analysis if \u0027nan\u0027 not in i]\n#analysis_nonzero \u003d analysis((k, v) for k, v in analysis.iteritems() if v \u003e 0)\n#analysis_nonzero \u003d filter(lambda x : nan not in x[1], analysis_nonzero)\n#analysis_nonzero \u003d filter(lambda x : analysis[x] !\u003d nan, analysis_nonzero)\n#analysis_nonzero \u003d [x for x in analysis if str(x) !\u003d nan]\n#print analysis_nonzero\n",
      "user": "ad\\ruhirai",
      "dateUpdated": "Mar 20, 2017 2:09:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[(u\u0027DOID:4/DOID:4844/DOID:14566/DOID:0060072/DOID:0060084/DOID:0060101\u0027, nan), (u\u0027DOID:4/DOID:1564/DOID:2473/DOID:0050117/DOID:0050136\u0027, 0.16666666666666666), (u\u0027DOID:4/DOID:162/DOID:3119/DOID:14566/DOID:0050686\u0027, 0.016006913057850708), (u\u0027DOID:4/DOID:7/DOID:863/DOID:1492/DOID:5614/DOID:5679/DOID:0050155\u0027, 0.0081529989849174912), (u\u0027DOID:4/DOID:655/DOID:9252/DOID:0014667/DOID:0060159\u0027, nan), (u\u0027DOID:4/DOID:14566/DOID:0060072/DOID:0060085/DOID:0060089\u0027, 0.024832925694994658), (u\u0027DOID:4/DOID:7/DOID:17/DOID:65/DOID:381/DOID:3342/DOID:0080001\u0027, 0.060185185185185182), (u\u0027DOID:4/DOID:150/DOID:8670/DOID:0060037/DOID:0060038\u0027, 0.14285714285714285), (u\u0027DOID:4/DOID:7/DOID:850/DOID:1579/DOID:3082/DOID:0050161\u0027, 0.015208196223627469), (u\u0027DOID:4/DOID:7/DOID:863/DOID:2742/DOID:2952/DOID:0050155\u0027, 0.0081529989849174912)]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489680059422_1674480586",
      "id": "20170316-120059_1677981891",
      "dateCreated": "Mar 16, 2017 12:00:59 PM",
      "dateStarted": "Mar 20, 2017 2:09:53 PM",
      "dateFinished": "Mar 20, 2017 2:09:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndata \u003d map (lambda p : ( p[0], map (lambda d : d.drugs, p[1]) ), groups.iteritems ())\nspark_groups \u003d sc.parallelize (data)\nspark_groups.\\\n    map (lambda p : ( p[0], average_treatment_set_similarity (p[1]) )).\\\n    collect ()",
      "user": "ad\\scox",
      "dateUpdated": "Mar 16, 2017 6:45:56 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-8787467119452570828.py\", line 346, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-8787467119452570828.py\", line 334, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\nNameError: name \u0027groups\u0027 is not defined\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489680196400_1206842106",
      "id": "20170316-120316_385068130",
      "dateCreated": "Mar 16, 2017 12:03:16 PM",
      "dateStarted": "Mar 16, 2017 6:45:56 PM",
      "dateFinished": "Mar 16, 2017 6:45:56 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\nwhoami\necho python path $PYTHONPATH\npython -c \"import numpy as np; print(\u0027hi\u0027)\"\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 16, 2017 2:35:55 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "evryscope\npython path\nhi\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489688260541_-1366004281",
      "id": "20170316-141740_1315825988",
      "dateCreated": "Mar 16, 2017 2:17:40 PM",
      "dateStarted": "Mar 16, 2017 2:35:55 PM",
      "dateFinished": "Mar 16, 2017 2:35:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "ad\\scox",
      "dateUpdated": "Mar 16, 2017 2:35:12 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1489689312545_1221521251",
      "id": "20170316-143512_120618013",
      "dateCreated": "Mar 16, 2017 2:35:12 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "/M2M/DiseaseOntologyChem2Bio2RDF_ruhi",
  "id": "2CCC35MHW",
  "angularObjects": {
    "2C8PNVW4G:shared_process": [],
    "2C9M4A84U:shared_process": [],
    "2C8JB5J2A:shared_process": [],
    "2C8UPVAV8:shared_process": [],
    "2CB6QSJQK:shared_process": [],
    "2CB4GRYA4:shared_process": [],
    "2CAZ1XA1G:shared_process": [],
    "2CBGUDB9H:shared_process": [],
    "2C9VT2CHD:shared_process": [],
    "2CBBPS1GQ:shared_process": [],
    "2CAYF7YMG:shared_process": [],
    "2C7NS2RPM:shared_process": [],
    "2C9WWVYVN::2CCC35MHW": [],
    "2CB55MCKF:shared_process": [],
    "2C9P6TDB4:shared_process": [],
    "2C7YD2D51:shared_process": [],
    "2C9UAC7QR:shared_process": [],
    "2C8K1VZ6J:shared_process": [],
    "2CA9JMF94:shared_process": []
  },
  "config": {},
  "info": {}
}